package com.btjf.credit.report.mapper;

import com.btjf.credit.report.model.CreditReport;
import com.btjf.credit.report.model.CreditReportExample;
import com.btjf.credit.report.pojo.EmpCreditReport;
import com.btjf.credit.report.pojo.UnReadReport;
import org.apache.ibatis.annotations.Param;

import java.util.List;
import org.apache.ibatis.annotations.Param;

public interface CreditReportMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    long countByExample(CreditReportExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int deleteByExample(CreditReportExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int insert(CreditReport record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int insertSelective(CreditReport record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    List<CreditReport> selectByExampleWithBLOBs(CreditReportExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    List<CreditReport> selectByExample(CreditReportExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    CreditReport selectByPrimaryKey(Integer id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int updateByExampleSelective(@Param("record") CreditReport record, @Param("example") CreditReportExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int updateByExampleWithBLOBs(@Param("record") CreditReport record, @Param("example") CreditReportExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int updateByExample(@Param("record") CreditReport record, @Param("example") CreditReportExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int updateByPrimaryKeySelective(CreditReport record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int updateByPrimaryKeyWithBLOBs(CreditReport record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table t_CreditReport
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(CreditReport record);

    /**
     * 获取未读报告数量
     * @param empId
     * @return
     */
    List<UnReadReport> getUnReadReport(@Param("empId") Integer empId);

    /**
     * 获取员工当天的查询征信报告次数
     * @param empId 员工ID
     * @return
     */
    Integer getLimitDailCount(@Param("empId")Integer empId,@Param("reportType")Integer reportType);

    /**
     * 获取员工时间段内是否有查询记录
     * @param empId 员工ID
     * @param reportType    报告类型
     * @param time  时间段，单位分钟
     * @return
     */
    Integer getLimitTime(@Param("empId")Integer empId,@Param("reportType")Integer reportType,@Param("time")Integer time);

    /**
     * 搜索报告列表
     * @param queryStr  征信人姓名模糊、身份证号全量匹配关键字
     * @param reportType    报告类型
     * @return
     */
    List<EmpCreditReport> searchReportList(@Param("empId")Integer empId, @Param("deptId")Integer deptId, @Param("queryStr")String queryStr,
                                           @Param("reportType")Integer reportType, @Param("position")Integer position,@Param("showMonth") Integer showMonth);

    /**
     * 获取下级员工查询记录列表
     * @param empId 员工ID
     * @param deptId    部门ID
     * @param reportType    报告类型
     * @param position  审核人职位
     * @return
     */
    List<EmpCreditReport> findSubEmpReport(@Param("empId")Integer empId, @Param("deptId")Integer deptId, @Param("reportType")Integer reportType,
                                           @Param("position")Integer position,@Param("showMonth") Integer showMonth);

    /**
     * 搜索客户列表
     * @param empId 员工ID
     * @param deptId    部门ID
     * @param position  审核人职位
     * @return
     */
    List<CreditReport> findCustomer(@Param("empId")Integer empId,@Param("deptId")Integer deptId, @Param("position")Integer position,
                                    @Param("querierInfo") String querierInfo,@Param("showMonth") Integer showMonth);

    /**
     * 登录的员工获取征信报告时，校验该员工是否有查看权限
     * @param position  当前登录人职位
     * @param deptId    当前登录人部门ID
     * @param empId      数据库中报告发起人(员工)ID
     * @return  Integer
     */
    Integer permissionsCheck(@Param("position")Integer position,@Param("deptId")Integer deptId, @Param("empId")Integer empId);

}